// Generated by generate_protobuf_file.py

syntax = "proto3";

option java_package = "lu.uni.trux.jucify.callgraph";

message IfBlock{
  Bool condition = 1;
  Base then_block = 2;
  Base else_block = 3;
}

message Base {
  oneof sub_msg {
    Bool node_Bool = 1;
    Bits node_Bits = 2;
    Int node_Int = 3;
    IfBlock node_IfBlock = 4;
  }
}

message Bool {
  oneof sub_msg {
    BoolV node_BoolV = 1;
    BoolS node_BoolS = 2;
    IfBlock node_IfBlock = 3;

    Bool___and__ op_Bool___and__ = 4;
    Bool___eq__ op_Bool___eq__ = 5;
    Bool___invert__ op_Bool___invert__ = 6;
    Bool___ne__ op_Bool___ne__ = 7;
    Bool___or__ op_Bool___or__ = 8;
    Bool___rand__ op_Bool___rand__ = 9;
    Bool___ror__ op_Bool___ror__ = 10;
    Bool_intersection op_Bool_intersection = 11;
    Bool_Not op_Bool_Not = 12;
    BV_SGE op_BV_SGE = 13;
    BV_SGT op_BV_SGT = 14;
    BV_SLE op_BV_SLE = 15;
    BV_SLT op_BV_SLT = 16;
    BV_UGE op_BV_UGE = 17;
    BV_UGT op_BV_UGT = 18;
    BV_ULE op_BV_ULE = 19;
    BV_ULT op_BV_ULT = 20;
    BV___eq__ op_BV___eq__ = 21;
    BV___ge__ op_BV___ge__ = 22;
    BV___gt__ op_BV___gt__ = 23;
    BV___le__ op_BV___le__ = 24;
    BV___lt__ op_BV___lt__ = 25;
    BV___ne__ op_BV___ne__ = 26;
    FP___eq__ op_FP___eq__ = 27;
    FP___ge__ op_FP___ge__ = 28;
    FP___gt__ op_FP___gt__ = 29;
    FP___le__ op_FP___le__ = 30;
    FP___lt__ op_FP___lt__ = 31;
    FP___ne__ op_FP___ne__ = 32;
    FP_isInf op_FP_isInf = 33;
    FP_isNaN op_FP_isNaN = 34;
    FP_fpEQ op_FP_fpEQ = 35;
    FP_fpGEQ op_FP_fpGEQ = 36;
    FP_fpGT op_FP_fpGT = 37;
    FP_fpIsInf op_FP_fpIsInf = 38;
    FP_fpIsNaN op_FP_fpIsNaN = 39;
    FP_fpLEQ op_FP_fpLEQ = 40;
    FP_fpLT op_FP_fpLT = 41;
    String_StrContains op_String_StrContains = 42;
    String_StrIsDigit op_String_StrIsDigit = 43;
    String_StrPrefixOf op_String_StrPrefixOf = 44;
    String_StrSuffixOf op_String_StrSuffixOf = 45;
    String___eq__ op_String___eq__ = 46;
    String___ne__ op_String___ne__ = 47;
    Base_Not op_Base_Not = 48;
  }
}

message BoolV {
  bool value = 1;
}

message BoolS {
  string symbol = 1;
}

message Bits {
  oneof sub_msg {
    BV node_BV = 1;
    FP node_FP = 2;
    String node_String = 3;
    VS node_VS = 4;
    IfBlock node_IfBlock = 5;
  }
}

message BV {
  oneof sub_msg {
    BVV node_BVV = 1;
    BVS node_BVS = 2;
    IfBlock node_IfBlock = 3;

    BV_Concat op_BV_Concat = 4;
    BV_Extract op_BV_Extract = 5;
    BV_LShR op_BV_LShR = 6;
    BV_SDiv op_BV_SDiv = 7;
    BV_SMod op_BV_SMod = 8;
    BV___abs__ op_BV___abs__ = 9;
    BV___add__ op_BV___add__ = 10;
    BV___and__ op_BV___and__ = 11;
    BV___floordiv__ op_BV___floordiv__ = 12;
    BV___invert__ op_BV___invert__ = 13;
    BV___lshift__ op_BV___lshift__ = 14;
    BV___mod__ op_BV___mod__ = 15;
    BV___mul__ op_BV___mul__ = 16;
    BV___neg__ op_BV___neg__ = 17;
    BV___or__ op_BV___or__ = 18;
    BV___pos__ op_BV___pos__ = 19;
    BV___pow__ op_BV___pow__ = 20;
    BV___rshift__ op_BV___rshift__ = 21;
    BV___sub__ op_BV___sub__ = 22;
    BV___truediv__ op_BV___truediv__ = 23;
    BV___xor__ op_BV___xor__ = 24;
    BV_intersection op_BV_intersection = 25;
    BV_union op_BV_union = 26;
    BV_widen op_BV_widen = 27;
    BV_Reverse op_BV_Reverse = 28;
    BV_RotateLeft op_BV_RotateLeft = 29;
    BV_RotateRight op_BV_RotateRight = 30;
    BV_SignExt op_BV_SignExt = 31;
    BV_ZeroExt op_BV_ZeroExt = 32;
    FP_fpToIEEEBV op_FP_fpToIEEEBV = 33;
    FP_fpToSBV op_FP_fpToSBV = 34;
    FP_fpToUBV op_FP_fpToUBV = 35;
    String_StrIndexOf op_String_StrIndexOf = 36;
    String_StrLen op_String_StrLen = 37;
    String_StrToInt op_String_StrToInt = 38;
  }
}

message BVV {
  uint64 value = 1;
}

message BVS {
  string symbol = 1;
}

message FP {
  oneof sub_msg {
    BV fromBv = 1;
    FPV node_FPV = 2;
    FPS node_FPS = 3;
    IfBlock node_IfBlock = 4;

    FP___abs__ op_FP___abs__ = 5;
    FP___add__ op_FP___add__ = 6;
    FP___mul__ op_FP___mul__ = 7;
    FP___neg__ op_FP___neg__ = 8;
    FP___sub__ op_FP___sub__ = 9;
    FP___truediv__ op_FP___truediv__ = 10;
    FP_fpAbs op_FP_fpAbs = 11;
    FP_fpAdd op_FP_fpAdd = 12;
    FP_fpDiv op_FP_fpDiv = 13;
    FP_fpFP op_FP_fpFP = 14;
    FP_fpMul op_FP_fpMul = 15;
    FP_fpNeg op_FP_fpNeg = 16;
    FP_fpSub op_FP_fpSub = 17;
  }
}

message FPV {
  double value = 1;
}

message FPS {
  string symbol = 1;
}

message String {
  oneof sub_msg {
    StringV node_StringV = 1;
    StringS node_StringS = 2;
    IfBlock node_IfBlock = 3;

    String_IntToStr op_String_IntToStr = 4;
    String_StrConcat op_String_StrConcat = 5;
    String_StrReplace op_String_StrReplace = 6;
    String_StrSubstr op_String_StrSubstr = 7;
    String___add__ op_String___add__ = 8;
  }
}

message StringV {
  string value = 1;
}

message StringS {
  string symbol = 1;
}

message VS {
  oneof sub_msg {
    VSV node_VSV = 1;
    VSS node_VSS = 2;
    IfBlock node_IfBlock = 3;
  }
}

message VSV {
}

message VSS {
  string symbol = 1;
}

message Int {
  oneof sub_msg {
    IntV node_IntV = 1;
    IntS node_IntS = 2;
    IfBlock node_IfBlock = 3;
  }
}

message IntV {
  uint64 value = 1;
}

message IntS {
  string symbol = 1;
}

message Bool___and__ {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool___eq__ {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool___invert__ {
  Bool arg1 = 1;
  Bool return = 2;
}

message Bool___ne__ {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool___or__ {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool___rand__ {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool___ror__ {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool_intersection {
  Bool arg1 = 1;
  Bool arg2 = 2;
  Bool return = 3;
}

message Bool_Not {
  Bool arg1 = 1;
  Bool return = 2;
}

message BV_Concat {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_Extract {
  uint64 arg1 = 1;
  uint64 arg2 = 2;
  BV arg3 = 3;
  BV return = 4;
}

message BV_LShR {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_SDiv {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_SGE {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_SGT {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_SLE {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_SLT {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_SMod {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_UGE {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_UGT {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_ULE {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV_ULT {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___abs__ {
  BV arg1 = 1;
  BV return = 2;
}

message BV___add__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___and__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___eq__ {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___floordiv__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___ge__ {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___gt__ {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___invert__ {
  BV arg1 = 1;
  BV return = 2;
}

message BV___le__ {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___lshift__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___lt__ {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___mod__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___mul__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___ne__ {
  BV arg1 = 1;
  BV arg2 = 2;
  Bool return = 3;
}

message BV___neg__ {
  BV arg1 = 1;
  BV return = 2;
}

message BV___or__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___pos__ {
  BV arg1 = 1;
  BV return = 2;
}

message BV___pow__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___rshift__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___sub__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___truediv__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV___xor__ {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_intersection {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_union {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_widen {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_Reverse {
  BV arg1 = 1;
  BV return = 2;
}

message BV_RotateLeft {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_RotateRight {
  BV arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_SignExt {
  uint64 arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message BV_ZeroExt {
  uint64 arg1 = 1;
  BV arg2 = 2;
  BV return = 3;
}

message FP___abs__ {
  FP arg1 = 1;
  FP return = 2;
}

message FP___add__ {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP___eq__ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP___ge__ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP___gt__ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP___le__ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP___lt__ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP___mul__ {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP___ne__ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP___neg__ {
  FP arg1 = 1;
  FP return = 2;
}

message FP___sub__ {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP___truediv__ {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP_isInf {
  FP arg1 = 1;
  Bool return = 2;
}

message FP_isNaN {
  FP arg1 = 1;
  Bool return = 2;
}

message FP_fpAbs {
  FP arg1 = 1;
  FP return = 2;
}

message FP_fpAdd {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP_fpDiv {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP_fpEQ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP_fpFP {
  BV arg1 = 1;
  BV arg2 = 2;
  BV arg3 = 3;
  FP return = 4;
}

message FP_fpGEQ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP_fpGT {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP_fpIsInf {
  FP arg1 = 1;
  Bool return = 2;
}

message FP_fpIsNaN {
  FP arg1 = 1;
  Bool return = 2;
}

message FP_fpLEQ {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP_fpLT {
  FP arg1 = 1;
  FP arg2 = 2;
  Bool return = 3;
}

message FP_fpMul {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP_fpNeg {
  FP arg1 = 1;
  FP return = 2;
}

message FP_fpSub {
  string arg1 = 1;
  FP arg2 = 2;
  FP arg3 = 3;
  FP return = 4;
}

message FP_fpToIEEEBV {
  FP arg1 = 1;
  BV return = 2;
}

message FP_fpToSBV {
  string arg1 = 1;
  FP arg2 = 2;
  uint64 arg3 = 3;
  BV return = 4;
}

message FP_fpToUBV {
  string arg1 = 1;
  FP arg2 = 2;
  uint64 arg3 = 3;
  BV return = 4;
}

message String_IntToStr {
  BV arg1 = 1;
  String return = 2;
}

message String_StrConcat {
  String arg1 = 1;
  String arg2 = 2;
  String return = 3;
}

message String_StrContains {
  String arg1 = 1;
  String arg2 = 2;
  Bool return = 3;
}

message String_StrIndexOf {
  String arg1 = 1;
  String arg2 = 2;
  BV arg3 = 3;
  uint64 arg4 = 4;
  BV return = 5;
}

message String_StrIsDigit {
  String arg1 = 1;
  Bool return = 2;
}

message String_StrLen {
  String arg1 = 1;
  uint64 arg2 = 2;
  BV return = 3;
}

message String_StrPrefixOf {
  String arg1 = 1;
  String arg2 = 2;
  Bool return = 3;
}

message String_StrReplace {
  String arg1 = 1;
  String arg2 = 2;
  String arg3 = 3;
  String return = 4;
}

message String_StrSubstr {
  BV arg1 = 1;
  BV arg2 = 2;
  String arg3 = 3;
  String return = 4;
}

message String_StrSuffixOf {
  String arg1 = 1;
  String arg2 = 2;
  Bool return = 3;
}

message String_StrToInt {
  String arg1 = 1;
  uint64 arg2 = 2;
  BV return = 3;
}

message String___add__ {
  String arg1 = 1;
  String arg2 = 2;
  String return = 3;
}

message String___eq__ {
  String arg1 = 1;
  String arg2 = 2;
  Bool return = 3;
}

message String___ne__ {
  String arg1 = 1;
  String arg2 = 2;
  Bool return = 3;
}

message Base_Not {
  Bool arg1 = 1;
  Bool return = 2;
}
